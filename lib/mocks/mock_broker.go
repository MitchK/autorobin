// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/MitchK/autorobin/lib/broker (interfaces: Broker)

// Package mocks is a generated GoMock package.
package mocks

import (
	model "github.com/MitchK/autorobin/lib/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBroker is a mock of Broker interface
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockBroker) Execute(arg0 ...model.Order) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Execute", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockBrokerMockRecorder) Execute(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockBroker)(nil).Execute), arg0...)
}

// GetAvailableCash mocks base method
func (m *MockBroker) GetAvailableCash() (float64, error) {
	ret := m.ctrl.Call(m, "GetAvailableCash")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableCash indicates an expected call of GetAvailableCash
func (mr *MockBrokerMockRecorder) GetAvailableCash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableCash", reflect.TypeOf((*MockBroker)(nil).GetAvailableCash))
}

// GetOpenPositions mocks base method
func (m *MockBroker) GetOpenPositions() ([]model.Position, error) {
	ret := m.ctrl.Call(m, "GetOpenPositions")
	ret0, _ := ret[0].([]model.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenPositions indicates an expected call of GetOpenPositions
func (mr *MockBrokerMockRecorder) GetOpenPositions() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenPositions", reflect.TypeOf((*MockBroker)(nil).GetOpenPositions))
}

// GetPortfolio mocks base method
func (m *MockBroker) GetPortfolio(arg0 ...model.Asset) (model.Portfolio, error) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPortfolio", varargs...)
	ret0, _ := ret[0].(model.Portfolio)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolio indicates an expected call of GetPortfolio
func (mr *MockBrokerMockRecorder) GetPortfolio(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolio", reflect.TypeOf((*MockBroker)(nil).GetPortfolio), arg0...)
}

// GetQuotes mocks base method
func (m *MockBroker) GetQuotes(arg0 ...model.Asset) ([]model.Quote, error) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetQuotes", varargs...)
	ret0, _ := ret[0].([]model.Quote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuotes indicates an expected call of GetQuotes
func (mr *MockBrokerMockRecorder) GetQuotes(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuotes", reflect.TypeOf((*MockBroker)(nil).GetQuotes), arg0...)
}
